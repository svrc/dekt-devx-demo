apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: native-eks
  labels:
    crossplane.io/xrd: xmanagedclusters.xp.tanzu.vmware.com
    provider: native
    cluster: eks
spec:
  compositeTypeRef:
    apiVersion: xp.tanzu.vmware.com/v1alpha1
    kind: XManagedCluster
  writeConnectionSecretsToNamespace: crossplane-system
  patchSets:
  - name: metadata
    patches:
    - fromFieldPath: metadata.labels
  - name: tap-profile
    patches:
    - fromFieldPath: spec.parameters.profile
      toFieldPath: spec.
      transforms:
      - type: map
        map: 
          run: |            
            profile: run
            shared:
              ingress_domain: run
              ingress_issuer: tap-ingress-selfsigned
            cnrs:
              domain_template: '{{.Name}}.{{.Domain}}'
            contour:
              envoy:
                service:
                  type: LoadBalancer
            appliveview_connector:
              backend:
                host: appliveview
                ingressEnabled: true
                sslDeactivated: true
            ceip_policy_disclosed: true
      
  - name: region
    patches:
    - fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
      transforms:
      - type: map
        map:                    # Standard AZs: a-c; Fargate Support
          use1: us-east-1       # a-f
          use2: us-east-2
          usw1: us-west-1       # bc
          usw2: us-west-2       # a-d
          cac: ca-central-1     # abd, FG: ab
          sae: sa-east-1
          afs: af-south-1       # default: disabled
          euc: eu-central-1
          euw1: eu-west-1
          euw2: eu-west-2
          euw3: eu-west-3
          eus: eu-south-1       # default: disabled
          eun: eu-north-1
          ape: ap-east-1        # default: disabled
          aps1: ap-south-1
          apne1: ap-northeast-1 # acd
          apne2: ap-northeast-2 # a-d
          apne3: ap-northeast-3
          apse1: ap-southeast-1
          apse2: ap-southeast-2
          apse3: ap-southeast-3 # default: disabled
  - name: snet-zone-1
    patches:
    - fromFieldPath: spec.parameters.region
      toFieldPath: metadata.labels.zone
      transforms:
      - type: map
        map:
          use1: us-east-1a
          use2: us-east-2a
          usw1: us-west-1b
          usw2: us-west-2a
          cac: ca-central-1a
          sae: sa-east-1a
          afs: af-south-1a
          euc: eu-central-1a
          euw1: eu-west-1a
          euw2: eu-west-2a
          euw3: eu-west-3a
          eus: eu-south-1a
          eun: eu-north-1a
          ape: ap-east-1a
          aps1: ap-south-1a
          apne1: ap-northeast-1a
          apne2: ap-northeast-2a
          apne3: ap-northeast-3a
          apse1: ap-southeast-1a
          apse2: ap-southeast-2a
          apse3: ap-southeast-3a
    - fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.availabilityZone
      transforms:
      - type: map
        map:
          use1: us-east-1a
          use2: us-east-2a
          usw1: us-west-1b
          usw2: us-west-2a
          cac: ca-central-1a
          sae: sa-east-1a
          afs: af-south-1a
          euc: eu-central-1a
          euw1: eu-west-1a
          euw2: eu-west-2a
          euw3: eu-west-3a
          eus: eu-south-1a
          eun: eu-north-1a
          ape: ap-east-1a
          aps1: ap-south-1a
          apne1: ap-northeast-1a
          apne2: ap-northeast-2a
          apne3: ap-northeast-3a
          apse1: ap-southeast-1a
          apse2: ap-southeast-2a
          apse3: ap-southeast-3a
  - name: snet-zone-2
    patches:
    - fromFieldPath: spec.parameters.region
      toFieldPath: metadata.labels.zone
      transforms:
      - type: map
        map:
          use1: us-east-1b
          use2: us-east-2b
          usw1: us-west-1c       # No a zone
          usw2: us-west-2b
          cac: ca-central-1b
          sae: sa-east-1b
          afs: af-south-1b
          euc: eu-central-1b
          euw1: eu-west-1b
          euw2: eu-west-2b
          euw3: eu-west-3b
          eus: eu-south-1b
          eun: eu-north-1b
          ape: ap-east-1b
          aps1: ap-south-1b
          apne1: ap-northeast-1d # No b zone
          apne2: ap-northeast-2b
          apne3: ap-northeast-3b
          apse1: ap-southeast-1b
          apse2: ap-southeast-2b
          apse3: ap-southeast-3b
    - fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.availabilityZone
      transforms:
      - type: map
        map:
          use1: us-east-1b
          use2: us-east-2b
          usw1: us-west-1b       # No a zone
          usw2: us-west-2b
          cac: ca-central-1b
          sae: sa-east-1b
          afs: af-south-1b
          euc: eu-central-1b
          euw1: eu-west-1b
          euw2: eu-west-2b
          euw3: eu-west-3b
          eus: eu-south-1b
          eun: eu-north-1b
          ape: ap-east-1b
          aps1: ap-south-1b
          apne1: ap-northeast-1d # No b zone
          apne2: ap-northeast-2b
          apne3: ap-northeast-3b
          apse1: ap-southeast-1b
          apse2: ap-southeast-2b
          apse3: ap-southeast-3b
  - name: snet-zone-3
    patches:
    - fromFieldPath: spec.parameters.region
      toFieldPath: metadata.labels.zone
      transforms:
      - type: map
        map:
          use1: us-east-1c
          use2: us-east-2c
          usw1: us-west-1c
          usw2: us-west-2c
          cac: ca-central-1b # No c zone; d zone not support FG
          sae: sa-east-1c
          afs: af-south-1c
          euc: eu-central-1c
          euw1: eu-west-1c
          euw2: eu-west-2c
          euw3: eu-west-3c
          eus: eu-south-1c
          eun: eu-north-1c
          ape: ap-east-1c
          aps1: ap-south-1c
          apne1: ap-northeast-1c
          apne2: ap-northeast-2c
          apne3: ap-northeast-3c
          apse1: ap-southeast-1c
          apse2: ap-southeast-2c
          apse3: ap-southeast-3c
    - fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.availabilityZone
      transforms:
      - type: map
        map:
          use1: us-east-1c
          use2: us-east-2c
          usw1: us-west-1c
          usw2: us-west-2c
          cac: ca-central-1b # No c zone; d zone not support FG
          sae: sa-east-1c
          afs: af-south-1c
          euc: eu-central-1c
          euw1: eu-west-1c
          euw2: eu-west-2c
          euw3: eu-west-3c
          eus: eu-south-1c
          eun: eu-north-1c
          ape: ap-east-1c
          aps1: ap-south-1c
          apne1: ap-northeast-1c
          apne2: ap-northeast-2c
          apne3: ap-northeast-3c
          apse1: ap-southeast-1c
          apse2: ap-southeast-2c
          apse3: ap-southeast-3c
  - name: route-zones
    patches:
    - fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.associations[0].subnetIdSelector.matchLabels.zone
      transforms:
      - type: map
        map:
          use1: us-east-1a
          use2: us-east-2a
          usw1: us-west-1b
          usw2: us-west-2a
          cac: ca-central-1a
          sae: sa-east-1a
          afs: af-south-1a
          euc: eu-central-1a
          euw1: eu-west-1a
          euw2: eu-west-2a
          euw3: eu-west-3a
          eus: eu-south-1a
          eun: eu-north-1a
          ape: ap-east-1a
          aps1: ap-south-1a
          apne1: ap-northeast-1a
          apne2: ap-northeast-2a
          apne3: ap-northeast-3a
          apse1: ap-southeast-1a
          apse2: ap-southeast-2a
          apse3: ap-southeast-3a
    - fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.associations[1].subnetIdSelector.matchLabels.zone
      transforms:
      - type: map
        map:
          use1: us-east-1b
          use2: us-east-2b
          usw1: us-west-1b       # No a zone
          usw2: us-west-2b
          cac: ca-central-1b
          sae: sa-east-1b
          afs: af-south-1b
          euc: eu-central-1b
          euw1: eu-west-1b
          euw2: eu-west-2b
          euw3: eu-west-3b
          eus: eu-south-1b
          eun: eu-north-1b
          ape: ap-east-1b
          aps1: ap-south-1b
          apne1: ap-northeast-1d # No b zone
          apne2: ap-northeast-2b
          apne3: ap-northeast-3b
          apse1: ap-southeast-1b
          apse2: ap-southeast-2b
          apse3: ap-southeast-3b
    - fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.associations[2].subnetIdSelector.matchLabels.zone
      transforms:
      - type: map
        map:
          use1: us-east-1c
          use2: us-east-2c
          usw1: us-west-1c
          usw2: us-west-2c
          cac: ca-central-1b # No c zone; d zone not support FG
          sae: sa-east-1c
          afs: af-south-1c
          euc: eu-central-1c
          euw1: eu-west-1c
          euw2: eu-west-2c
          euw3: eu-west-3c
          eus: eu-south-1c
          eun: eu-north-1c
          ape: ap-east-1c
          aps1: ap-south-1c
          apne1: ap-northeast-1c
          apne2: ap-northeast-2c
          apne3: ap-northeast-3c
          apse1: ap-southeast-1c
          apse2: ap-southeast-2c
          apse3: ap-southeast-3c
  resources:
  # IAM Roles
  - name: iamrole-controlplane
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: Role
      spec:
        forProvider:
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": [
                              "eks.amazonaws.com"
                          ]
                      },
                      "Action": [
                          "sts:AssumeRole"
                      ]
                  }
              ]
            }
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-controlplane"
    - fromFieldPath: spec.id
      toFieldPath: metadata.labels.role
      transforms:
      - type: string
        string:
          fmt: "%s-controlplane"
  - name: iamrole-csi
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: Role
      spec:
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-csi"
    - fromFieldPath: spec.id
      toFieldPath: metadata.labels.role
      transforms:
      - type: string
        string:
          fmt: "%s-csi"
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicyDocument
      policy:
        fromFieldPath: Required
      combine:
        variables:
        - fromFieldPath: status.accountID
        - fromFieldPath: status.oidcIssuerID
        - fromFieldPath: status.oidcIssuerID
        - fromFieldPath: status.oidcIssuerID
        strategy: string
        string: 
          fmt: |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                        },
                        "Action": "sts:AssumeRoleWithWebIdentity",
                        "Condition": {
                            "StringEquals": {
                                "%s:aud": "sts.amazonaws.com",
                                "%s:sub": "system:serviceaccount:kube-system:ebs-csi-controller-sa"
                            }
                        }
                    }
                ]
            }
  - name: iamrole-cluster-essentials
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: Role
      spec:
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-tanzu-essentials"
    - fromFieldPath: spec.id
      toFieldPath: metadata.labels.role
      transforms:
      - type: string
        string:
          fmt: "%s-tanzu-essentials"
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicyDocument
      policy:
        fromFieldPath: Required
      combine:
        variables:
        - fromFieldPath: status.accountID
        - fromFieldPath: status.oidcIssuerID
        - fromFieldPath: status.oidcIssuerID
        - fromFieldPath: status.oidcIssuerID
        strategy: string
        string: 
          fmt: |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                        },
                        "Action": "sts:AssumeRoleWithWebIdentity",
                        "Condition": {
                            "StringEquals": {
                                "%s:aud": "sts.amazonaws.com",
                                "%s:sub": "system:serviceaccount:cluster-essentials:default"
                            }
                        }
                    }
                ]
            }
  - name: iamrole-nodegroup
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: Role
      spec:
        forProvider:
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": [
                              "ec2.amazonaws.com"
                          ]
                      },
                      "Action": [
                          "sts:AssumeRole"
                      ]
                  }
              ]
            }
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-nodegroup"
    - fromFieldPath: spec.id
      toFieldPath: metadata.labels.role
      transforms:
      - type: string
        string:
          fmt: "%s-nodegroup"
  - name: iamrole-fargateprofile
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: Role
      spec:
        forProvider:
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": [
                              "eks-fargate-pods.amazonaws.com"
                          ]
                      },
                      "Action": [
                          "sts:AssumeRole"
                      ]
                  }
              ]
            }
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-fargateprofile"
    - fromFieldPath: spec.id
      toFieldPath: metadata.labels.role
      transforms:
      - type: string
        string:
          fmt: "%s-fargateprofile"

  # IAM ROLE POLICY ATTCHMENTS
  - name: iamrolepolicy-cp-001
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
          roleNameSelector:
            matchControllerRef: true
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-cp-001"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: "%s-controlplane"
  - name: iamrolepolicy-cp-002
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSServicePolicy
          roleNameSelector:
            matchControllerRef: true
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-cp-002"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: "%s-controlplane"
  - name: iamrolepolicy-cp-003
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEBSCSIDriverPolicy
          roleNameSelector:
            matchControllerRef: true
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-cp-003"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: "%s-controlplane"
  - name: csiRolePolicyAttachment
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
          roleSelector:
            matchControllerRef: true
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-csi"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: "%s-csi"
  - name: tanzuEssentialsRolePolicyAttachment
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
          roleSelector:
            matchControllerRef: true
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-tanzu-essentials"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: "%s-tanzu-essentials"
  - name:  iamrolepolicy-ng-001
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          roleNameSelector:
            matchControllerRef: true
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-ng-001"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: "%s-nodegroup"
  - name: iamrolepolicy-ng-002
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
          roleNameSelector:
            matchControllerRef: true
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-ng-002"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: "%s-nodegroup"
  - name: iamrolepolicy-ng-003
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          roleNameSelector:
            matchControllerRef: true
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-ng-003"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: "%s-nodegroup"
  - name: iamrolepolicy-ng-004
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
          roleNameSelector:
            matchControllerRef: true
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-ng-004"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: "%s-nodegroup"
  - name:  iamrolepolicy-fp-001
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy
          roleNameSelector:
            matchControllerRef: true
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-fp-001"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: "%s-fargateprofile"

  - name: ec2vpc
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: VPC
      spec:
        forProvider:
          cidrBlock: 10.0.0.0/16
          tags:
          - key: Name
            value: eks-vpc
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - type: PatchSet
      patchSetName: region
    - fromFieldPath: spec.id
      toFieldPath: metadata.name

  - name: ec2sg-ng
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: SecurityGroup
      spec:
        forProvider:
          description: Cluster communication with worker nodes
          groupName: ekscluster-sg
          vpcIdSelector:
            matchControllerRef: true
          egress:
          - ipProtocol: "-1"
            ipRanges:
            - cidrIp: "0.0.0.0/0"
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - type: PatchSet
      patchSetName: region
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-sg"

  - name: ec2snet-pub-a
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          access: public
      spec:
        forProvider:
          cidrBlock: 10.0.0.0/24
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIPOnLaunch: true
          tags:
          - key: Name
            value: eks-snet-pub
          - key: kubernetes.io/role/elb
            value: "1"
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - type: PatchSet
      patchSetName: region
    - type: PatchSet
      patchSetName: snet-zone-1
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-pub-a"
  - name: ec2snet-pub-b
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          access: public
      spec:
        forProvider:
          cidrBlock: 10.0.1.0/24
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIPOnLaunch: true
          tags:
          - key: Name
            value: eks-snet-pub
          - key: kubernetes.io/role/elb
            value: "1"
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - type: PatchSet
      patchSetName: region
    - type: PatchSet
      patchSetName: snet-zone-2
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-pub-b"
  - name: ec2snet-pub-c
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          access: public
      spec:
        forProvider:
          cidrBlock: 10.0.2.0/24
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIPOnLaunch: true
          tags:
          - key: Name
            value: eks-snet-pub
          - key: kubernetes.io/role/elb
            value: "1"
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - type: PatchSet
      patchSetName: region
    - type: PatchSet
      patchSetName: snet-zone-3
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-pub-c"

  - name: ec2snet-prv-a
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          access: private
      spec:
        forProvider:
          cidrBlock: 10.0.100.0/24
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIPOnLaunch: true
          tags:
          - key: Name
            value: eks-snet-prv
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - type: PatchSet
      patchSetName: region
    - type: PatchSet
      patchSetName: snet-zone-1
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-prv-a"
  - name: ec2snet-prv-b
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          access: private
      spec:
        forProvider:
          cidrBlock: 10.0.101.0/24
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIPOnLaunch: true
          tags:
          - key: Name
            value: eks-snet-prv
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - type: PatchSet
      patchSetName: region
    - type: PatchSet
      patchSetName: snet-zone-2
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-prv-b"
  - name: ec2snet-prv-c
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          access: private
      spec:
        forProvider:
          cidrBlock: 10.0.102.0/24
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIPOnLaunch: true
          tags:
          - key: Name
            value: eks-snet-prv
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - type: PatchSet
      patchSetName: region
    - type: PatchSet
      patchSetName: snet-zone-3
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-prv-c"

  - name: ec2-ig
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: InternetGateway
      spec:
        forProvider:
          vpcIdSelector:
            matchControllerRef: true
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - type: PatchSet
      patchSetName: region
    - fromFieldPath: spec.id
      toFieldPath: metadata.name

  - name: ec2-rt
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: RouteTable
      spec:
        forProvider:
          vpcIdSelector:
            matchControllerRef: true
          routes:
            - destinationCidrBlock: 0.0.0.0/0
              gatewayIdSelector:
                matchControllerRef: true
          associations:
            - subnetIdSelector:
                matchControllerRef: true
                matchLabels:
                  zone: a
                  access: public
            - subnetIdSelector:
                matchControllerRef: true
                matchLabels:
                  zone: b
                  access: public
            - subnetIdSelector:
                matchControllerRef: true
                matchLabels:
                  zone: c
                  access: public
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - type: PatchSet
      patchSetName: region
    - type: PatchSet
      patchSetName: route-zones
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-rt"

  - name: ekscluster
    base:
      apiVersion: eks.aws.crossplane.io/v1beta1
      kind: Cluster
      spec:
        forProvider:
          roleArnSelector:
            matchControllerRef: true
          resourcesVpcConfig:
            endpointPrivateAccess: true
            endpointPublicAccess: true
            subnetIdSelector:
              matchControllerRef: true
        writeConnectionSecretToRef:
          namespace: crossplane-system
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - type: PatchSet
      patchSetName: region
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "cluster-%s"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleArnSelector.matchLabels.role
      transforms:
        - type: string
          string:
            fmt: "%s-controlplane"
    - fromFieldPath: spec.parameters.version
      toFieldPath: spec.forProvider.version
    - fromFieldPath: spec.id
      toFieldPath: spec.writeConnectionSecretToRef.name
      transforms:
        - type: string
          string:
            fmt: "%s-ekscluster"
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: status.clusterName
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.identity.oidc.issuer
      toFieldPath: status.oidcIssuerURL
      policy:
        fromFieldPath: Optional
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.identity.oidc.issuer
      toFieldPath: status.oidcIssuerID
      policy:
        fromFieldPath: Optional
      transforms:
        - type: string
          string:
            type: Regexp
            regexp:
              match: '^https?:\/\/(.*)'
              group: 1
    - type: ToCompositeFieldPath
      fromFieldPath: spec.forProvider.roleArn
      toFieldPath: status.accountID
      policy:
        fromFieldPath: Required
      transforms:
        - type: string
          string:
            type: Regexp
            regexp:
              match: 'arn:aws:iam::(\d+):.*'
              group: 1
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.status
      toFieldPath: status.controlPlaneStatus
    connectionDetails:
    - fromConnectionSecretKey: kubeconfig
    readinessChecks:
    - type: MatchString
      fieldPath: status.atProvider.status
      matchString: ACTIVE

  - name: ekscsi
    base:
      apiVersion: eks.aws.crossplane.io/v1alpha1
      kind: Addon
      spec:
        forProvider:
          addonName: aws-ebs-csi-driver
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-csi"
    - type: PatchSet
      patchSetName: region
    - fromFieldPath: status.clusterName
      toFieldPath: spec.forProvider.clusterNameRef.name
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.serviceAccountRoleARN
      policy:
        fromFieldPath: Required
      combine:
        variables:
        - fromFieldPath: status.accountID     
        - fromFieldPath: spec.id
        strategy: string
        string: 
          fmt: "arn:aws:iam::%s:role/%s-csi"
 
  - name: eksnode
    base:
      apiVersion: eks.aws.crossplane.io/v1alpha1
      kind: NodeGroup
      spec:
        forProvider:
          clusterNameSelector:
            matchControllerRef: true
          nodeRoleSelector:
            matchControllerRef: true
          subnetSelector:
            matchControllerRef: true
            matchLabels:
              access: public
          scalingConfig:
            maxSize: 10
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - type: PatchSet
      patchSetName: region
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
    - fromFieldPath: spec.parameters.nodeSize
      toFieldPath: spec.forProvider.instanceTypes[0]
      transforms:
        - type: map
          map:
            small: t3.small
            medium: t3.medium
            large: t3.large
    - fromFieldPath: spec.parameters.nodeCount
      toFieldPath: spec.forProvider.scalingConfig.minSize
    - fromFieldPath: spec.parameters.minNodeCount
      toFieldPath: spec.forProvider.scalingConfig.desiredSize
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.nodeRoleSelector.matchLabels.role
      transforms:
        - type: string
          string:
            fmt: "%s-nodegroup"
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.status
      toFieldPath: status.nodePoolStatus
    readinessChecks:
    - type: MatchString
      fieldPath: status.atProvider.status
      matchString: ACTIVE

  - name: eksoidcprovider
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: OpenIDConnectProvider
      spec:
        forProvider:
          clientIDList:
            - sts.amazonaws.com
          thumbprintList:
            - "9e99a48a9960b14926bb7f3b02e22da2b0ab7280"
        providerConfigRef:
          name: aws-xp-provider
    patches:
      - fromFieldPath: status.oidcIssuerURL
        toFieldPath: spec.forProvider.url
        policy:
          fromFieldPath: Required
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-oidc-provider"

  - name: eksidproviderconfig
    base:
      apiVersion: eks.aws.crossplane.io/v1alpha1
      kind: IdentityProviderConfig
      spec:
        forProvider:
          oidc:
            clientId: sts.amazonaws.com
            
        providerConfigRef:
          name: aws-xp-provider
    patches:
      - type: PatchSet
        patchSetName: region
      - fromFieldPath: status.oidcIssuerURL
        toFieldPath: spec.forProvider.oidc.issuerUrl
        policy:
          fromFieldPath: Required
      - fromFieldPath: status.clusterName
        toFieldPath: spec.forProvider.clusterNameRef.name
        policy:
          fromFieldPath: Required
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-idproviderconfig"
              

  - name: eksfargate
    base:
      apiVersion: eks.aws.crossplane.io/v1beta1
      kind: FargateProfile
      spec:
        forProvider:
          clusterNameSelector:
            matchControllerRef: true
          podExecutionRoleArnSelector:
            matchControllerRef: true
          subnetSelector:
            matchControllerRef: true
            matchLabels:
              access: private
        providerConfigRef:
          name: aws-xp-provider
    patches:
    - type: PatchSet
      patchSetName: region
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
    - fromFieldPath: spec.parameters.fargateNamespace
      toFieldPath: spec.forProvider.selectors[0].namespace
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.podExecutionRoleArnSelector.matchLabels.role
      transforms:
        - type: string
          string:
            fmt: "%s-fargateprofile"
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.status
      toFieldPath: status.fargateProfileStatus
    readinessChecks:
    - type: MatchString
      fieldPath: status.atProvider.status
      matchString: ACTIVE

  - name: kubernetes
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: ProviderConfig
      spec:
        credentials:
          source: Secret
          secretRef:
            key: kubeconfig
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
    - fromFieldPath: spec.writeConnectionSecretToRef.namespace
      toFieldPath: spec.credentials.secretRef.namespace
    - fromFieldPath: spec.id
      toFieldPath: spec.credentials.secretRef.name
      transforms:
        - type: string
          string:
            fmt: "%s-ekscluster"
    readinessChecks:
      - type: None
  - name: k8s-ns-xp
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: crossplane-system
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-ns-xp"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name


  - name: helm
    base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              key: kubeconfig
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
      - fromFieldPath: spec.writeConnectionSecretToRef.namespace
        toFieldPath: spec.credentials.secretRef.namespace
      - fromFieldPath: spec.id
        toFieldPath: spec.credentials.secretRef.name
        transforms:
          - type: string
            string:
              fmt: "%s-ekscluster"
    readinessChecks:
      - type: None
  - name: helm-xp
    base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: crossplane-system
            chart:
              name: crossplane
              repository: https://charts.crossplane.io/stable
              version: "1.11.1"
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-crossplane"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
  - name: k8s-ns-tanzu-cluster-essentials
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: cluster-essentials
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-ns-tanzu-cluster-essentials"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
      
  - name: k8s-crb-tanzu-cluster-essentials
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: cluster-essentials-admin
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: cluster-admin
            subjects:
            - kind: ServiceAccount
              name: default
              namespace: cluster-essentials
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-crb-tanzu-cluster-essentials"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
      
     
  - name: k8s-secret-tanzu-cluster-essentials
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Secret
            metadata:
              namespace: cluster-essentials
              name: ce-registry
            data:
              repo: dGFwLWltYWdlcy9jbHVzdGVyLWVzc2VudGlhbHMtYnVuZGxl
              sha256: c2hhMjU2OjU0YmY2MTE3MTE5MjNkY2NkN2M3ZjEwNjAzYzg0Njc4MmI5MDY0NGQ0OGYxY2I1NzBiNDNhMDgyZDE4ZTIzYjk=
              use_iaas_auth: dHJ1ZQ==    
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-secret-tanzu-cluster-essentials"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
    - fromFieldPath: spec.parameters.registryHost
      toFieldPath: spec.forProvider.manifest.data.host 
      policy:
        fromFieldPath: Required
      transforms:
      - type: string
        string:
          type: Convert
          convert: ToBase64 
     
  - name: k8s-sa-tanzu-cluster-essentials
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              namespace: cluster-essentials
              name: default
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-sa-tanzu-cluster-essentials"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.manifest.metadata.annotations[eks.amazonaws.com/role-arn]
      policy:
        fromFieldPath: Required
      combine:
        variables:
        - fromFieldPath: status.accountID     
        - fromFieldPath: spec.id
        strategy: string
        string: 
          fmt: "arn:aws:iam::%s:role/%s-tanzu-essentials"
          
      
      
  - name: k8s-cm-tanzu-cluster-essentials
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: scripts
              namespace: cluster-essentials
            data:
              install.sh: |
                #!/bin/bash

                set -e -o pipefail
                export HOME=/root 
                export ns_name=cluster-essentials

                echo "## Pulling bundle from $INSTALL_REGISTRY_HOSTNAME"

                [ -z "$INSTALL_REGISTRY_HOSTNAME" ] && { echo "INSTALL_REGISTRY_HOSTNAME env var must not be empty"; exit 1; }
                [ -z "$CLUSTER_ESSENTIALS_REPO" ] && { echo "CLUSTER_ESSENTIALS_REPO env var must not be empty"; exit 1; }
                [ -z "$CLUSTER_ESSENTIALS_SHA256" ] && { echo "CLUSTER_ESSENTIALS_SHA256  env var must not be empty"; exit 1; }
                INSTALL_BUNDLE=${INSTALL_REGISTRY_HOSTNAME}/${CLUSTER_ESSENTIALS_REPO}@${CLUSTER_ESSENTIALS_SHA256}
                if [ -z "$USE_IAAS_AUTH" ] || [ "$USE_IAAS_AUTH" != true ]; then
                  [ -z "$INSTALL_REGISTRY_USERNAME" ] && { echo "INSTALL_REGISTRY_USERNAME env var must not be empty"; exit 1; }
                  [ -z "$INSTALL_REGISTRY_PASSWORD" ] && { echo "INSTALL_REGISTRY_PASSWORD env var must not be empty"; exit 1; }
                else
                  export INSTALL_REGISTRY_USERNAME=AWS
                  export INSTALL_REGISTRY_PASSWORD=$(aws ecr get-login-password --region us-west-1)
                fi
                export IMGPKG_REGISTRY_HOSTNAME_0=$INSTALL_REGISTRY_HOSTNAME
                export IMGPKG_REGISTRY_USERNAME_0=$INSTALL_REGISTRY_USERNAME
                export IMGPKG_REGISTRY_PASSWORD_0=$INSTALL_REGISTRY_PASSWORD
                export YTT_registry__server=$INSTALL_REGISTRY_HOSTNAME
                export YTT_registry__username=$INSTALL_REGISTRY_USERNAME
                export YTT_registry__password=$INSTALL_REGISTRY_PASSWORD
    
                KUBECONFIG=kubeconfig
                kubectl config set-cluster default --server=https://kubernetes.default.svc.cluster.local --certificate-authority /var/run/secrets/kubernetes.io/serviceaccount/ca.crt 
                kubectl config set-credentials cluster-essentials-default --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
                kubectl config set-context default --cluster=default --user=cluster-essentials-default
                kubectl config use-context default
                kubectl cluster-info

                imgpkg pull -b $INSTALL_BUNDLE -o ./bundle/

                echo "## Deploying kapp-controller"
                (ytt -f ./bundle/kapp-controller/config/ -f ./bundle/registry-creds/ --data-values-env YTT --data-value-yaml kappController.deployment.concurrency=10 | kbld -f- -f ./bundle/.imgpkg/images.yml) > output.yml
                kapp deploy -a kapp-controller -n $ns_name -f output.yml "$@"

                echo "## Deploying secretgen-controller"
                (ytt -f ./bundle/secretgen-controller/config/ -f ./bundle/registry-creds/ --data-values-env YTT | kbld -f- -f ./bundle/.imgpkg/images.yml) > output.yml
                kapp deploy -a secretgen-controller -n $ns_name -f output.yml "$@"

                kubectl delete clusterrolebinding cluster-essentials-admin

    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-cm-tanzu-cluster-essentials"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name

     
  - name: k8s-job-tanzu-cluster-essentials
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: batch/v1
            kind: Job
            metadata:
              name: install-cluster-essentials
              namespace: cluster-essentials
            spec:
              backoffLimit: 0
              activeDeadlineSeconds: 3600
              ttlSecondsAfterFinished: 3600
              template:
                spec:
                  restartPolicy: Never
                  volumes:
                    - name: scripts-volume
                      configMap:
                        name: scripts
                  containers:
                  - name: install-cluster-essentials
                    command: ["/bin/bash"]
                    args: 
                    - /scripts/install.sh
                    - "--yes"
                    resources:
                      requests:
                        cpu: "1000m"
                        memory: "256Mi"
                    volumeMounts:
                    - name: scripts-volume
                      mountPath: /scripts
                    env:
                    - name: USE_IAAS_AUTH
                      valueFrom:
                        secretKeyRef:
                          name: ce-registry
                          key: use_iaas_auth
                          optional: true
                    - name: INSTALL_REGISTRY_HOSTNAME
                      valueFrom:
                        secretKeyRef:
                          name: ce-registry
                          key: host
                          optional: false
                    - name: INSTALL_REGISTRY_USERNAME
                      valueFrom:
                        secretKeyRef:
                          name: ce-registry
                          key: username
                          optional: true
                    - name: INSTALL_REGISTRY_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: ce-registry
                          key: password
                          optional: true
                    - name: CLUSTER_ESSENTIALS_REPO
                      valueFrom:
                        secretKeyRef:
                          name: ce-registry
                          key: repo
                          optional: false
                    - name: CLUSTER_ESSENTIALS_SHA256
                      valueFrom:
                        secretKeyRef:
                          name: ce-registry
                          key: sha256
                          optional: false

        
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-job-tanzu-cluster-essentials"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
    - fromFieldPath: spec.parameters.registryHost
      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].image
      transforms:
      - type: string
        string:
          fmt: "%s/tap-images/carvel-docker-image:latest"

  - name: k8s-ns-tap
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: tap-install
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-ns-tap"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
          
  - name: k8s-packagerepo-tap
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: packaging.carvel.dev/v1alpha1
            kind: PackageRepository
            metadata:
              name: tanzu-tap-repository
              namespace: tap-install
                    
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-packagerepo-tap"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name                 
    - fromFieldPath: spec.parameters.registryHost
      toFieldPath: spec.forProvider.manifest.spec.fetch.spec.imgpkgBundle.image
      transforms:
      - type: string
        string:
          fmt: "%s/tap-images/tap-images/tap-packages:1.4.0"

     
  - name: k8s-packageinstall-tap
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: packaging.carvel.dev/v1alpha1
            kind: PackageInstall
            metadata:
              annotations:
                tkg.tanzu.vmware.com/tanzu-package-ClusterRole: tap-tap-install-cluster-role
                tkg.tanzu.vmware.com/tanzu-package-ClusterRoleBinding: tap-tap-install-cluster-rolebinding
                tkg.tanzu.vmware.com/tanzu-package-Secret: tap-tap-install-values
                tkg.tanzu.vmware.com/tanzu-package-ServiceAccount: tap-tap-install-sa             
              name: tap
              namespace: tap-install             
            spec:
              packageRef:
                refName: tap.tanzu.vmware.com
                versionSelection:
                  constraints: 1.4.0
                  prereleases: {}
              serviceAccountName: tap-tap-install-sa
              values:
              - secretRef:
                  name: tap-tap-install-values  
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-packageinstall-tap"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name                 

                                 
                    
                    
