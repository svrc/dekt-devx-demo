clusters:
  view: # TAP view profile installed
    name: 
    provider: eks #accepted values: aks,eks,gke.  
    nodes: 3
  dev: # TAP interate profile installed
    name: 
    provider: eks #accepted values: aks,eks,gke 
    nodes: 5 
  stage: #TAP build profile installed
    name: 
    provider: eks #accepted values: aks,eks,gke
    nodes: 5 
  prod: # TAP run profile installed
    name: 
    provider: eks #accepted values: aks,eks,gke
    nodes: 3 
  brownfield: #optional, needed for bronwfield apis demo, SCGW and TSM, no TAP installed
    name: 
    provider: #accepted values: aks,eks,gke
    nodes: 3 

clouds:
  azure:
    location: 
    resourceGroup: 
    nodeType: Standard_DS3_v2 
  aws:
    accountID: 
    IAMuser:
    region: 
    instanceType: t3.xlarge
  gcp:
    region: 
    projectID: 
    machineType: e2-standard-4



private_registry:
  host:  YOUR_AWS_ACCOUNT_ID.dkr.ecr.YOUR_AWS_REGION.amazonaws.com
  aws_iam_arn: "arn:aws:iam::YOUR AWS ACCOUNT ID:role"

workload_iam_arn: "arn:aws:iam::YOUR AWS ACCOUNT ID:role"

repositories: #repos needs to be created manually in your private registry
  system: tap-images
  dev: tap-apps
  stage: tap-apps
  build_service: tap-build-service


tanzu_network:
  username: 
  password: 

tap:
  tapVersion: "1.4.2"
  carvelBundle: "sha256:2354688e46d4bb4060f74fca069513c9b42ffa17a0a6d5b0dbb81ed52242ea44"
  imageScanTemplateSrcScanSC: #accepted values: carbonblack-private-image-scan-template snyk-private-image-scan-template, private-image-scan-template
  imageScanTemplateSrcTestScanSC: #accepted values: carbonblack-private-image-scan-template snyk-private-image-scan-template, private-image-scan-template
  ingressIssuer: tap-ingress-selfsigned # if modified, issuer name must be indetical to .config/cluster-configs/cluster-issuer.yaml

snyk: 
  token: 

carbonblack:
  cbc_api_id: 
  cbc_api_key: 
  cbc_org_key: 
  cbc_saas_url: 

apps_namespaces: 
  dev: #for single dev workload
  team: #for team dev workloads
  stageProd: #for stage and prod workloads

gitops:
  server: "https://github.com/"
  apiKey: 
  owner: 
  dev: #repo needs to be created manually and clone at the same folder level as the demo repo, make sure git pull works
  stage: #repo needs to be created manually and clone at the same folder level as the demo repo, make sure git pull works

dns: #e.g. dev.dekt.io / run.dekt.io
  domain: YOUR TOP LEVEL DOMAIN HERE
  sysSubDomain: sys
  devSubDomain: dev
  prodSubDomain: prod
  awsRoute53HostedZoneID: YOUR ROUTE53 ZONE ID HERE

data_services:
  tdsVersion: 1.6.0 
  tanzuPostgresVersion:
  rdsProfile: #pre-configured named profile for an AWS account that has permissions to manage RDS databases

brownfield_apis: #optional, needed if you want to demo 'brownfield apis'
  scgwInstallDirectory:
  privateClusterContext: #setup this cluster (e.g. on vSphere) seperatly, and put the kubectl context name here

tmc:
  apiToken: 
  clusterGroup:
