#@ load("@ytt:data", "data")
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  annotations:
    #@ if data.values.cluster_type == "dev":
    eks.amazonaws.com/role-arn: #@ "{}/{}-{}".format(data.values.workload_iam_arn, data.values.clusters.dev.name, "workload")
    #@ elif data.values.cluster_type == "stage":
    eks.amazonaws.com/role-arn: #@ "{}/{}-{}".format(data.values.workload_iam_arn, data.values.clusters.stage.name, "workload")
    #@ elif data.values.cluster_type == "prod":
    eks.amazonaws.com/role-arn: #@ "{}/{}-{}".format(data.values.workload_iam_arn, data.values.clusters.prod.name, "workload")
    #@ end
secrets:
  - name: gitops-credentials
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-permit-deliverable
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: deliverable
subjects:
  - kind: ServiceAccount
    name: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-permit-workload
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: workload
subjects:
  - kind: ServiceAccount
    name: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-reader
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  - services
  - configmaps
  verbs:
  - get
  - watch
  - list
